---
- name: Get timezone
  ansible.builtin.command: timedatectl
  register: tz
  changed_when: tz.rc != 0

- name: filter tz
  ansible.builtin.debug:
    msg: "{{ tz.stdout | regex_search('(?<=Time zone: )[a-zA-Z\/]+') }}"
  register: timezone

- name: Set timezone to Europe/Moscow
  when: timezone.msg != "Europe/Moscow"
  community.general.timezone:
    name: Europe/Moscow

- name: Get ntp status
  ansible.builtin.command: timedatectl
  register: ntp_status
  changed_when: ntp_status.rc != 0

- name: Filter ntp_status
  ansible.builtin.debug:
    msg: "{{ ntp_status.stdout | regex_search('(?<=NTP service: ).*') }}"
  register: ntp_status_filtered

- name: Enable ntp
  when: ntp_status_filtered.msg == "inactive"
  ansible.builtin.command: sudo timedatectl set-ntp on

- name: (All)- check if fail2ban
  when: ansible_facts.services["fail2ban.service"] is not defined
  ansible.builtin.debug:
    msg: not installed
  register: check_fail2ban

- name: (RedHat)- install  epel-release for CentOS
  when: check_fail2ban.msg == "not installed" and ansible_os_family == "RedHat"
  ansible.builtin.package:
    name: epel-release
    state: present

- name: Install fail2ban
  when: check_fail2ban.msg == "not installed"
  ansible.builtin.package:
    name: fail2ban
    state: present

- name: Configure fail2ban
  ansible.builtin.copy:
    src: ./files/jail.local
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: '0644'
  register: conf_fail2ban

- name: Reload service fail2ban, after config
  ansible.builtin.service:
    name: fail2ban
    state: reloaded

- name: (RedHat)- sendmail proofing
  when: ansible_os_family == "RedHat"
  ansible.builtin.stat:
    path: /usr/sbin/sendmail
  register: check_sendmail

- name: (Debian)- sendmail proofing
  when: ansible_os_family == "Debian"
  ansible.builtin.stat:
    path: /usr/sbin/sendmail
  register: check_sendmail

- name: Install sendmail (for fail2ban)
  when: check_sendmail.stat.exists is false
  ansible.builtin.package:
    name: sendmail
    state: present


- name: (Debian)- Install pexpect for ansible.builtin.expect
  when: ansible_os_family == "Debian"
  ansible.builtin.package:
    name: python3-pexpect
    state: present
  register: pexpect_inst_result_deb
  failed_when: pexpect_inst_result_deb.rc != 0

- name: (RedHat)- Install pexpect for ansible.builtin.expect
  when: ansible_os_family == "RedHat"
  pip:
    name: pexpect>3.3
  register: pexpect_inst_result_rhl
  failed_when: pexpect_inst_result_rhl.rc != 0

- name: Exec sendmailconfig
  when: check_sendmail is failed
  ansible.builtin.expect:
    command: sendmailconfig
    responses:
      Configure sendmail with the existing \/etc\/mail\/sendmail\.conf\? \[Y\]: y
      Configure sendmail with the existing \/etc\/mail\/sendmail\.mc\? \[Y\]: y
      Reload the running sendmail now with the new configuration\? \[Y\]: y
    timeout: 120

- name: Configure ssh-server
  ansible.builtin.copy:
    src: ./files/sshd_config
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: '0644'

- name: Copy issue.net
  ansible.builtin.copy:
    src: ./files/issue.net
    dest: /etc/issue.net
    owner: root
    group: root
    mode: '0644'

- name: Automounting proofing
  when: ansible_facts.services["autofs.service"] is not defined
  ansible.builtin.debug:
    msg: not installed
  register: status_autofs

- name: Disable Automounting
  when: ansible_facts.services["autofs.service"] is defined and status_autofs.msg != "not installed"
  ansible.builtin.systemd:
    name: autofs
    enabled: false
